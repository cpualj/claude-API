version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: claude-api-db
    environment:
      POSTGRES_USER: claude_user
      POSTGRES_PASSWORD: claude_password
      POSTGRES_DB: claude_api
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claude_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - claude-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: claude-api-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - claude-network

  # 后端 API 服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: claude-api-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://claude_user:claude_password@postgres:5432/claude_api
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      CLAUDE_API_KEYS: ${CLAUDE_API_KEYS:-}
      CLAUDE_ACCOUNTS: ${CLAUDE_ACCOUNTS:-}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123456}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - claude_sessions:/app/sessions
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - claude-network

  # Claude Worker 节点 1
  worker1:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: claude-worker-1
    environment:
      WORKER_ID: worker-1
      WORKER_PORT: 3002
      DATABASE_URL: postgresql://claude_user:claude_password@postgres:5432/claude_api
      REDIS_URL: redis://redis:6379
      CLAUDE_ACCOUNT_INDEX: 0
      MAX_CONCURRENT: 5
    volumes:
      - ./worker:/app
      - /app/node_modules
      - claude_data_1:/app/.claude
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
    networks:
      - claude-network

  # Claude Worker 节点 2 (可选，用于负载均衡)
  worker2:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: claude-worker-2
    environment:
      WORKER_ID: worker-2
      WORKER_PORT: 3003
      DATABASE_URL: postgresql://claude_user:claude_password@postgres:5432/claude_api
      REDIS_URL: redis://redis:6379
      CLAUDE_ACCOUNT_INDEX: 1
      MAX_CONCURRENT: 5
    volumes:
      - ./worker:/app
      - /app/node_modules
      - claude_data_2:/app/.claude
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - redis
    networks:
      - claude-network
    profiles:
      - multi-worker

  # 前端 (使用现有的 React 项目)
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    container_name: claude-api-frontend
    environment:
      VITE_API_URL: http://backend:3001
      VITE_SERVER_URL: http://backend:3001
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - /app/node_modules
    ports:
      - "3030:3030"
    depends_on:
      - backend
    networks:
      - claude-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: claude-api-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - claude-network

volumes:
  postgres_data:
  redis_data:
  claude_sessions:
  claude_data_1:
  claude_data_2:

networks:
  claude-network:
    driver: bridge